{
	"name": "df_alterrow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "sourcedataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "loctgt",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "deptgt",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_ID as short,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as double,",
				"          COMMISSION_PCT as double,",
				"          MANAGER_ID as short,",
				"          DEPARTMENT_ID as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          EMPLOYEE_ID as short,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as double,",
				"          COMMISSION_PCT as double,",
				"          MANAGER_ID as short,",
				"          DEPARTMENT_ID as short,",
				"          department_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1, source2 join(source1@EMPLOYEE_ID == source2@EMPLOYEE_ID,",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 alterRow(deleteIf(isNull(source1@EMPLOYEE_ID))) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:true,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:false,",
				"     keys:['EMPLOYEE_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EMPLOYEE_ID = source2@EMPLOYEE_ID,",
				"          FIRST_NAME = source1@FIRST_NAME,",
				"          LAST_NAME = source1@LAST_NAME,",
				"          EMAIL = source1@EMAIL,",
				"          PHONE_NUMBER = source1@PHONE_NUMBER,",
				"          HIRE_DATE = source1@HIRE_DATE,",
				"          JOB_ID = source1@JOB_ID,",
				"          SALARY = source1@SALARY,",
				"          COMMISSION_PCT = source1@COMMISSION_PCT,",
				"          MANAGER_ID = source1@MANAGER_ID,",
				"          DEPARTMENT_ID = source1@DEPARTMENT_ID,",
				"          EMPLOYEE_ID = source2@EMPLOYEE_ID,",
				"          FIRST_NAME = source2@FIRST_NAME,",
				"          LAST_NAME = source2@LAST_NAME,",
				"          EMAIL = source2@EMAIL,",
				"          PHONE_NUMBER = source2@PHONE_NUMBER,",
				"          HIRE_DATE = source2@HIRE_DATE,",
				"          JOB_ID = source2@JOB_ID,",
				"          SALARY = source2@SALARY,",
				"          COMMISSION_PCT = source2@COMMISSION_PCT,",
				"          MANAGER_ID = source2@MANAGER_ID,",
				"          DEPARTMENT_ID = source2@DEPARTMENT_ID,",
				"          department_name",
				"     )) ~> sink1"
			]
		}
	}
}